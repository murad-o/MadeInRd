@page
@using System.Globalization
@using ExporterWeb.Helpers.Services
@inject CommonLocalizationService Localizer
@model RegisterModel
@{
    ViewData["Title"] = Localizer["Registration"];
}

<main class="primary-content" role="main">

    <div class="container">

        <div class="account-card">

            <div class="account-header">
                <div class="account-header__top">
                    <div class="d-flex justify-content-between align-items-baseline">
                        <h3 class="account-header__title">@Localizer["Registration"]</h3>
                        <a asp-area="Identity" asp-page="/Account/Login" class="link link_border account-header__text">@Localizer["Log in"]</a>
                    </div>
                </div>
                <div class="account-header__bottom">
                    <h4 class="account-header__subtitle">@Localizer["Information about company"]</h4>
                </div>


                <form method="post" class="for-validate account-form" id="form-registration">
                    <div asp-validation-summary="ModelOnly"></div>
                    <div class="form-group">
                        <label asp-for="Input.Name"></label>
                        <input asp-for="Input.Name" class="form-control" autofocus="autofocus" placeholder="@Localizer["Enter company name"]">
                        <span asp-validation-for="Input.Name" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Input.INN"></label>
                        <input asp-for="Input.INN" class="form-control" placeholder=@Localizer["Enter company INN"]>
                        <span asp-validation-for="Input.INN" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Input.OGRN_IP"></label>
                        <input asp-for="Input.OGRN_IP" class="form-control" placeholder=@Localizer["Enter company OGRNIP"]>
                        <span asp-validation-for="Input.OGRN_IP" class="text-danger"></span>
                    </div>
                    <div id="form-group_select" class="form-group form-group-select">
                        <label asp-for="Input.FieldOfActivityId"></label>
                        <select asp-for="Input.FieldOfActivityId" id="custom-select">
                            <option data-placeholder="true"></option>
                            @foreach (var industry in Model.FieldsOfActivity)
                            {
                                <option value="@industry.Id">@industry.Name[CultureInfo.CurrentCulture.TwoLetterISOLanguageName]</option>
                            }
                        </select>
                        @* <span asp-validation-for="Input.FieldOfActivityId" class="form-group-select__hidden-text" style="display: none"></span> *@
                        <span id="select-error" asp-validation-for="Input.FieldOfActivityId" class="field-validation-error select-error text-danger"></span>
                    </div>

                    <div class="account-header__center">
                        <h4 class="account-header__subtitle">@Localizer["Data of the organization’s contact person"]</h4>
                    </div>

                    <div class="form-group">
                        <label asp-for="Input.ContactPersonSecondName"></label>
                        <input asp-for="Input.ContactPersonSecondName" class="form-control required-input" placeholder=@Localizer["Enter your last name"]>
                        <span asp-validation-for="Input.ContactPersonSecondName" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Input.ContactPersonFirstName"></label>
                        <input asp-for="Input.ContactPersonFirstName" class="form-control required-input" placeholder=@Localizer["Enter your first name"]>
                        <span asp-validation-for="Input.ContactPersonFirstName" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Input.ContactPersonPatronymic"></label>
                        <input asp-for="Input.ContactPersonPatronymic" class="form-control" placeholder=@Localizer["Enter your patronymic"]>
                        <span asp-validation-for="Input.ContactPersonPatronymic" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Input.Position"></label>
                        <input asp-for="Input.Position" class="form-control" placeholder=@Localizer["Indicate your position"]>
                        <span asp-validation-for="Input.Position" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Input.Email"></label>
                        <input asp-for="Input.Email" class="form-control email-mask required-input" placeholder=@Localizer["Enter your email"]>
                        <span asp-validation-for="Input.Email" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Input.Phone"></label>
                        <input asp-for="Input.Phone" class="form-control phone-mask required-input" placeholder="+7 (___) ___-__-__">
                        <span asp-validation-for="Input.Phone" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Input.Password"></label>
                        <input asp-for="Input.Password" id="password-input" class="form-control password-input" placeholder=@Localizer["Enter password"]>
                        <span asp-validation-for="Input.Password" class="text-danger"></span>
                        <small class="password-control" onclick="show_hide_password(event, 'password-input')">
                            <svg class="view">
                                <use xlink:href="/img/sprite.svg#password-view"></use>
                            </svg>
                            <svg class="hidden">
                                <use xlink:href="/img/sprite.svg#password-hidden"></use>
                            </svg>
                        </small>
                    </div>
                    <div class="form-group">
                        <label asp-for="Input.ConfirmPassword"></label>
                        <input asp-for="Input.ConfirmPassword" id="password-repeat-input" class="form-control password-input" placeholder=@Localizer["Enter password again"]>
                        <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
                        <small class="password-control" onclick="show_hide_password(event, 'password-repeat-input')">
                            <svg class="view">
                                <use xlink:href="/img/sprite.svg#password-view"></use>
                            </svg>
                            <svg class="hidden">
                                <use xlink:href="/img/sprite.svg#password-hidden"></use>
                            </svg>
                        </small>
                    </div>

                    <div class="form-group">
                        <div class="form-check">
                            <label class="form-check-label label_custom" for="invalidCheck">
                                <input asp-for="Input.IsTermsOfUseAgreed" class="form-check-input" id="invalidCheck">
                                <span class="checkmark checkmark-checkbox"></span>
                                <p>
                                    @Localizer["I'm aware and agree with"] <a asp-page="/TermsOfUse" class="link link_border" target="_blank">@Localizer["the terms of the user agreement"]</a>
                                </p>
                            </label>
                        </div>
                        <span asp-validation-for="Input.IsTermsOfUseAgreed" class="text-danger"></span>
                    </div>


                    <div class="form-group d-flex align-items-sm-center flex-sm-row flex-column align-items-start mb-0">
                        <button class="btn btn-big btn-primary go__register mr-0 mr-sm-4" type="submit">@Localizer["Sign up"]</button>
                        <a class="link link_border d-sm-none d-block mt-4" href="#">@Localizer["Log in"]</a>
                    </div>
                </form>

            </div>


        </div>
    </div>

</main>

@section Scripts {
    <partial name="_ValidationScriptsPartial"/>
    <script>
        new SlimSelect({
           select: '#custom-select',
           showSearch: true,
           searchText: 'Поиск',
           // searchPlaceholder: 'Поиск',
           allowDeselect: true,
           selected: true,
           // value: '',
           // hideSelectedOption: true,
           placeholder: '@Localizer["Select an industry"]'
        })
        
        // Настройка кастомного селекта
        const form = document.getElementById('form-registration');
        form.addEventListener('submit', function() {
            let select = document.getElementById('custom-select');
            let selectWrp = document.getElementById('form-group_select');

            select.value ? selectWrp.classList.remove('form-group-select__invalid') : selectWrp.classList.add('form-group-select__invalid');

            select.addEventListener('change', function() {
                select.value ? selectWrp.classList.remove('form-group-select__invalid') : selectWrp.classList.add('form-group-select__invalid');
            });
        });
        
        // Фикс чекбокса
        let defaultRangeValidator = $.validator.methods.range;
        $.validator.methods.range = function(value, element, param) {
            if(element.type === 'checkbox') {
                // if it's a checkbox return true if it is checked
                return element.checked;
            } else {
                // otherwise run the default validation function
                return defaultRangeValidator.call(this, value, element, param);
            }
        }
    </script>
}